<?php

namespace App\Core;

class CaesarSubstitution
{
    private array $russianAlphabet = [
        '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠', '–Æ', '–Ø'
    ];

    public function encryptSurname(string $surname, int $key): void
    {
        $surname = mb_strtoupper($surname);
        $arrSurname = mb_str_split($surname);

        foreach ($arrSurname as $symbol) {
            $arrNum[] = array_search($symbol, $this->russianAlphabet, true);
        }

        echo PHP_EOL . '–û–±—â–∞—è —Ñ–æ—Ä–º—É–ª–∞ –®–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è:'  . PHP_EOL .
            '–°=(ùëÉ+ùêæ)%ùëÄ, –≥–¥–µ P ‚Äì –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –° ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –µ–º—É –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞, K ‚Äì –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–¥–≤–∏–≥–∞), ' . PHP_EOL .
            'M ‚Äì —Ä–∞–∑–º–µ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ M = 32).' . "–û—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç $surname, –∫–ª—é—á = $key" . PHP_EOL . PHP_EOL;

        echo '–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –±—É–∫–≤—ã —Å–æ–æ–±—â–µ–Ω–∏—è:' . PHP_EOL;

        foreach ($arrNum as $keyArr => $symbolNum) {
            $resultNum = ($symbolNum + $key) % 32;
            $encryptArr[] = $this->russianAlphabet[$resultNum];
            echo 'c' . $keyArr . "=(m" . $keyArr . '+' . $key . ")" . 'mod32' . '=' . '(' . $symbolNum . '+' . $key . ")" . 'mod32' . "=$resultNum" . ' (–ë—É–∫–≤–∞ ' . $this->russianAlphabet[$resultNum] . ')' . PHP_EOL;
        }

        echo '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç' . ' - ' . $surname . PHP_EOL;
        echo '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã–π —Ç–µ–∫—Å—Ç' . ' - ' . implode('', $encryptArr) . PHP_EOL;
    }
}